<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:p="http://www.springframework.org/schema/p"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.1.xsd">

    <!--
    Enables the support of annotation configuration for Spring MVC controllers,
    as well as enabling Spring 3 type conversion and formatting support.
    Also, support for JSR-303 Bean Validation is enabled by this tag.
    -->
    <annotation-driven />

    <!--
    The <resources> tag defines the static resources
    (for example, CSS, JavaScript, images, and so on)
    and their locations so Spring MVC can improve the
    performance in serving those files.

    <resources mapping="/resources/**" location="/resources/" />
    -->
    <resources location="/, classpath:/META-INF/web-resources/" mapping="/resources/**"/>

    <!--
    Enables the mapping of the DispatcherServlet to the web application's root context URL,
    while still allowing static resource requests to be handled by the container's default servlet.
    -->
    <default-servlet-handler/>

    <!-- Removed as part of tile configuration
    <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <beans:property name="prefix" value="/WEB-INF/views/" />
        <beans:property name="suffix" value=".jspx" />
    </beans:bean>
    -->

    <!-- Tiles Configuration

    ViewResolver bean with the class UrlBasedViewResolver is defined, with the property viewClass
    set to the TilesView class, which is Spring MVC's support for Tiles.
    Finally, a tilesConfigurer bean is defined that provides the layout configurations required by Tiles.
    -->
    <beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" id="tilesViewResolver">
        <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
    </beans:bean>

    <beans:bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer" id="tilesConfigurer">
        <beans:property name="definitions">
            <beans:list>
                <beans:value>/WEB-INF/layouts/layouts.xml</beans:value>
                <!-- Scan views directory for Tiles configurations -->
                <beans:value>/WEB-INF/views/**/views.xml</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>

    <context:component-scan base-package="com.juan.springmvc.web.controller" />

    <interceptors>
        <!--
        Spring MVC interceptor with class LocaleChangeInterceptor is defined,
        which intercepts all the requests to the DispatcherServlet. The interceptor
        supports locale switching with a configurable request parameter. From the
        interceptor configuration, the URL param with the name lang is defined for
        changing the locale for the application.
        -->
        <beans:bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" p:paramName="lang"/>

        <!--
        Theming support interceptor
        The ThemeChangeInterceptor class intercepts every request for changing the theme.
        -->
        <beans:bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>

    </interceptors>


    <beans:bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
                id="messageSource" p:basenames="WEB-INF/i18n/messages,WEB-INF/i18n/application"
                p:fallbackToSystemLocale="false"/>

    <!--
    This class supports the storage and retrieval of locale settings from the user browser's cookie.
    -->
    <beans:bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
                id="localeResolver" p:cookieName="locale"/>

    <!--
    Theming support beans
    -->

    <!--
    ResourceBundleThemeSource class, is responsible for loading the ResourceBundle of the active theme.
    For example, if the active theme is called standard, the bean will look for the file standard.properties
    as the ResourceBundle of the theme.
    -->
    <beans:bean class="org.springframework.ui.context.support.ResourceBundleThemeSource" id="themeSource"/>

    <!--
    CookieThemeResolver class, is used to resolve the active theme for users. The property
    defaultThemeName defines the default theme to use, which is the standard theme.
    Note that as its name implies, the CookieThemeResolver class uses cookies to store the theme for the user.
    There also exists the SessionThemeResolver class that stores the theme attribute in a user's session.
    -->
    <beans:bean class="org.springframework.web.servlet.theme.CookieThemeResolver"
                id="themeResolver" p:cookieName="theme" p:defaultThemeName="standard"/>

</beans:beans>