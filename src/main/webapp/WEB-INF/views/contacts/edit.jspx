<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<div xmlns:jsp="http://java.sun.com/JSP/Page" 
     xmlns:c="http://java.sun.com/jsp/jstl/core" 
     xmlns:spring="http://www.springframework.org/tags"
     xmlns:form="http://www.springframework.org/tags/form"
     version="2.0">

    <spring:message code="label_contact_new" var="labelContactNew"/>
    <spring:message code="label_contact_update" var="labelContactUpdate"/>
    <spring:message code="label_contact_first_name" var="labelContactFirstName"/>
    <spring:message code="label_contact_last_name" var="labelContactLastName"/>
    <spring:message code="label_contact_birth_date" var="labelContactBirthDate"/>
    <spring:message code="label_contact_description" var="labelContactDescription"/>
    <spring:message code="label_contact_photo" var="labelContactPhoto"/>

    <!--
       The <spring:eval> tag is used, which uses the Spring Expression Language to test whether the contact id is null.
       If yes, then it's a new contact; otherwise, it's an update. The corresponding form title will be displayed.
    -->
    <spring:eval expression="contact.id == null ? labelContactNew : labelContactUpdate" var="formTitle"/>
    <spring:eval expression="contact.id == null ? 'POST' : 'PUT' " var="putPost"/>

    <script type="text/javascript">

    $(function(){

        //decorated using jQuery UI's datepicker() function
        $('#birthDate').datepicker({ 
            dateFormat: 'yy-mm-dd',
            format: 'yyyy-mm-dd',  //
            changeYear: true
        });

        var options = {
            target:        '#output',   // target element(s) to be updated with server response
            beforeSubmit:  showRequest,  // pre-submit callback
            success:       showResponse,  // post-submit callback

            beforeSerialize: function($form, options) {
                // return false to cancel submit
            },

            // other available options:
            //url: override for form's 'action' attribute
            url:  "/api/contacts/${contact.id}",
            //type: 'get' or 'post', override for form's 'method' attribute
            type: "${putPost}",
            //dataType: 'xml', 'script', or 'json' (expected server response type)
            dataType: 'json',
            clearForm: true,        // clear all form fields after successful submit
            resetForm: true         // reset the form after successful submit

            // $.ajax options can be used here too, for example:
            //timeout:   3000
            //contentType: 'application/json'
        };


        // bind to the form's submit event
        $('#contactUpdateForm').submit(function() {
            // inside event callbacks 'this' is the DOM element so we first
            // wrap it in a jQuery object and then invoke ajaxSubmit
            $(this).ajaxSubmit(options);

            // !!! Important !!!
            // always return false to prevent standard browser submit and page navigation
            return false;
        });

        // pre-submit callback
        function showRequest(formData, jqForm, options) {

            // formData is an array; here we use $.param to convert it to a string to display it
            // but the form plugin does this for you automatically when it submits the data
            var queryString = $.param(formData);

            // jqForm is a jQuery object encapsulating the form element.  To access the
            // DOM element for the form do this:
            // var formElement = jqForm[0];

            console.log('About to submit: ' + queryString);

            // here we could return false to prevent the form from being submitted;
            // returning anything other than false will allow the form submit to continue
            return true;
        }

        // post-submit callback
        function showResponse(responseText, statusText, xhr, $form)  {
            // for normal html responses, the first argument to the success callback
            // is the XMLHttpRequest object's responseText property

            // if the ajaxSubmit method was passed an Options Object with the dataType
            // property set to 'xml' then the first argument to the success callback
            // is the XMLHttpRequest object's responseXML property

            // if the ajaxSubmit method was passed an Options Object with the dataType
            // property set to 'json' then the first argument to the success callback
            // is the json data object returned by the server

            console.log('status: ' + statusText + '\nresponseText: ' + JSON.stringify(responseText) +
                    '\nThe output div should have already been updated with the responseText.');

            $('#output').append('<b>'+ JSON.stringify(responseText) + '</b>');
            $('#myModal').modal('show');
        }

    });
    </script>

    <h4 id="joy_ride_1">${formTitle}</h4>

    <div class="container">
        <form:form
                modelAttribute="contact"
                id="contactUpdateForm"
                method="post"
                cssClass="form-horizontal">

            <c:if test="${not empty message}">
                <div id="message" class="${message.type}">${message.message}</div>
            </c:if>
            <div class="control-group" id="numero2">
                <form:label path="firstName" cssClass="control-label">
                    ${labelContactFirstName}*
                </form:label>
                <div class="controls">
                    <form:input path="firstName" /> <span class="help-inline">Inline help text</span>
                </div>
                <div>
                    <form:errors path="firstName" cssClass="error" />
                </div>
            </div>

            <div class="control-group">
                <form:label path="lastName" cssClass="control-label">
                    ${labelContactLastName}*
                </form:label>
                <div class="controls">
                    <form:input path="lastName" />
                </div>
                <div>
                    <form:errors path="lastName" cssClass="error" />
                </div>
            </div>

            <div class="control-group">
                <form:label path="birthDate" cssClass="control-label">
                    ${labelContactBirthDate}*
                </form:label>
                <div class="controls">
                    <form:input path="birthDate" />
                </div>
                <div>
                    <form:errors path="birthDate" cssClass="error" />
                </div>
            </div>

            <div class="control-group">
                <form:label path="description" cssClass="control-label">
                    ${labelContactDescription}*
                </form:label>
                <div class="controls">
                    <form:textarea cols="60" rows="8" path="description" id="contactDescription"/>
                </div>
                <div>
                    <form:errors path="description" cssClass="error" />
                </div>
            </div>

            <form:hidden path="id" />
            <form:hidden path="version" />

            <!-- new button styles -->
            <button class="btn btn-mini btn-primary" type="submit" id="joy_ride_2">Save</button>
            <button class="btn btn-mini" type="reset">Reset</button>

        </form:form>
    </div>

    <div class="container">
        <!-- Modal -->
        <div id="myModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">Ã—</button>
                <h3 id="myModalLabel">Modal header</h3>
            </div>
            <div class="modal-body">
                <div id="output"></div>
            </div>
            <div class="modal-footer">
                <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
            </div>
        </div>

    </div>

</div>


